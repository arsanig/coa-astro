---
import { getPlaylistItems } from "@scripts/youtubeApi";
const fullPodPlaylistId = import.meta.env.COA_PODCASTS_FULL_PLAYLIST_ID;

type Podcast = {
    kind: string;
    etag: string;
    id: string;
    contentDetails: {
        videoId: string;
        videoPublishedAt: string;
    };
};

const data = await getPlaylistItems(3, fullPodPlaylistId);
const podcastIds = data?.items?.map((pod: Podcast) => pod?.contentDetails?.videoId);
---

<div class="bg-gray p-4 sm:p-8">
    <div class="max-w-[95vw] mx-auto relative">
        <div class="overflow-hidden">
            <div class="flex transition-transform duration-300 ease-in-out" id="carousel-track">
                {
                    podcastIds?.map((podId: string, index: number) => (
                        <div class="min-w-full px-2 sm:px-4">
                            <div class="aspect-video w-full max-w-[90vw] sm:max-w-[85vw] md:max-w-[80vw] lg:max-w-[75vw] mx-auto">
                                <iframe
                                    class="w-full h-full"
                                    src={`https://youtube.com/embed/${podId}${index === 0 ? "?autoplay=1&mute=1" : ""}`}
                                    allow="autoplay; encrypted-media"
                                    loading="lazy"
                                />
                            </div>
                        </div>
                    ))
                }
            </div>
        </div>
        <button
            class="carousel-button prev absolute left-0 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors"
            id="prev-button"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
            >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
        </button>
        <button
            class="carousel-button next absolute right-0 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors"
            id="next-button"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
            >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
        </button>
        <div class="flex justify-center mt-4 space-x-2">
            {
                podcastIds?.map((_, index) => (
                    <button
                        class="w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-colors carousel-dot"
                        data-index={index}
                    />
                ))
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const track = document.getElementById("carousel-track");
        const slides = document.querySelectorAll(".min-w-full");
        const prevButton = document.getElementById("prev-button");
        const nextButton = document.getElementById("next-button");
        const dots = document.querySelectorAll(".carousel-dot");

        if (!track || !prevButton || !nextButton) return;

        let currentIndex = 0;
        const slideCount = slides.length;

        function updateCarousel() {
            if (track instanceof HTMLElement) {
                track.style.transform = `translateX(-${currentIndex * 100}%)`;
            }
            dots.forEach((dot, index) => {
                if (dot instanceof HTMLElement) {
                    dot.classList.toggle("bg-white", index === currentIndex);
                    dot.classList.toggle("bg-white/50", index !== currentIndex);
                }
            });
        }

        prevButton.addEventListener("click", () => {
            currentIndex = (currentIndex - 1 + slideCount) % slideCount;
            updateCarousel();
        });

        nextButton.addEventListener("click", () => {
            currentIndex = (currentIndex + 1) % slideCount;
            updateCarousel();
        });

        dots.forEach((dot, index) => {
            dot.addEventListener("click", () => {
                currentIndex = index;
                updateCarousel();
            });
        });

        // Initialize
        updateCarousel();
    });
</script>
